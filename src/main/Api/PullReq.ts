// This files manages the logic for making a pull request to the repo containing the .htacces needed to redirect.

const octokit = require('@octokit/rest')()

export function createPullRequest(owner:string, repo:string, head: string, token:string){
    authenticate(token) //this should be extracted to higher lying function later
    octokit.pullRequests.create({
    owner : "oSoc18", 
    repo  : "resolver",
    title : "please pull me in", 
    head  : "BertSchoovaerts:master", 
    body  : generateBody(),
    base  : "master" }, (error:any ,result:any) => {
        console.log("result: " + result)
        console.log("error: " + error)
    })
}

function generateBody():string{
    var result:string = ""
    result += "Automated pullRequest generated by resolver application @" + new Date() +". /n"
    result += "Reqested by *****username*****"
    result += "Update of *****csv-filename*****"

    return result
}
function authenticate(token: string) :void {
    octokit.authenticate({
        type: "oauth",
        token: token
    })
}

export function createFork(owner: string, repo: string, token:string){
authenticate(token)
octokit.repos.fork({
    owner : "oSoc18",
    repo  : "resolver"
}, (error:any, result:any) => {
    console.log(result)
    console.log("error: " + error)
    })
}
export function updateFork(owner:string, repo:string, token:string){
    authenticate(token)
    octokit.gitdata.getReference({
        owner : "oSoc18",
        repo  : "resolver",
        ref   : "heads/master"
    },(error:any, result:any) => {
        console.log(result.data.object)
       console.log(error)
       
        const resultobject = result.data.object
        const sha = resultobject.sha
        const type = resultobject.type
        const url = resultobject.url
        console.log("sha: "+ sha)
        console.log("type: "+ type)
        console.log("url: " + url)
        merge("dummy", "dummy", sha, token)
        

    })
}
function merge(owner:string, repo:string, sha:string, token:string):void{
    octokit.repos.merge({
        owner : "BertSchoovaerts",
        repo  : "resolver",
        base  : "master",
        head  : sha,
        commit_message : "testerdefloepswoeps"
    },(error:any, result:any) => {
        console.log(result)
        console.log(error)
    })
}